# This guy checks a range of machines for a given hotfix. Super Hacky, but it works, so hey.

# Setup your text files here. I have all of my endpoint devices in a newline separated txt called "machinenames.txt" beforehand.
# I have a couple of other scripts that can create/manipulate that file beforehand. I'll get them all into this repo eventually.

New-Item C:\Users\$env:username\documents\unpatched.txt -ErrorAction SilentlyContinue
Clear-Content C:\Users\$env:username\documents\unpatched.txt
$cname = (Get-Content C:\Users\$env:username\documents\machinenames.txt)

# Basically, you pull the content from a newline separated document that has hostnames, check to see if that hostname
# has a resolution for a given hotfix, and if not, output it to the text file "unpatched.txt"

Invoke-Command -ComputerName $cname {
$hotfix = #insert hotfix here
if(!($testme = Get-Hotfix -id $Hotfix)) {$env:computername}
else{
Get-Hotfix -id $Hotfix
}
} -ErrorAction SilentlyContinue >> C:\Users\$env:username\documents\unpatched.txt


# Obtain IP's and current user for unpatched machines.

$host_list = Get-Content C:\Users\$env:username\documents\unpatched.txt
New-Item C:\Users\$env:username\documents\unpatchedwithinfo.txt -ErrorAction SilentlyContinue
Clear-Content C:\Users\$env:username\documents\unpatchedwithinfo.txt


Write-Output 'IP ADDRESS,HOSTNAME,Loggedin_User' >> C:\Users\$env:username\documents\unpatchedwithinfo.txt

Foreach($h in $host_list){
$newIP = Test-Connection $h -count 1
$ipresult = $newIP.IPV4Address.IpAddressToString
$UsernameObj = Get-CIMInstance -ComputerName $h -ClassName Win32_ComputerSystem -ErrorAction SilentlyContinue | Select-Object Username
$finalstring = $ipresult + ','+$h+','+ $usernameObj.Username

Write-Output $finalstring >> C:\Users\$env:username\documents\unpatchedwithinfo.txt
